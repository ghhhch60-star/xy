package com.xy.root.manager.utils

import android.content.Context
import android.os.Environment
import com.topjohnwu.superuser.Shell
import com.topjohnwu.superuser.io.SuFile
import com.topjohnwu.superuser.io.SuFileInputStream
import com.xy.root.manager.model.Partition
import com.xy.root.manager.utils.FormatUtils
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.*
import java.util.zip.GZIPOutputStream
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

class BackupManager(private val context: Context) {
    
    private val dateFormat = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault())
    
    suspend fun backupPartition(
        partition: Partition,
        onProgress: (Int) -> Unit
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            // Áõ¥Êé•Â§á‰ªΩÂà∞DownloadÊñá‰ª∂Â§πÔºå‰∏çÂàõÂª∫Â≠êÁõÆÂΩï
            val downloadDir = File("/storage/emulated/0/Download")
            if (!downloadDir.exists()) {
                downloadDir.mkdirs()
            }
            
            // ÁîüÊàêÂ§á‰ªΩÊñá‰ª∂ÂêçÔºàÂåÖÂê´Êó∂Èó¥Êà≥Ôºâ
            val timestamp = dateFormat.format(Date())
            val tempBackupFile = File(downloadDir, "${partition.name}_${timestamp}.img")
            val finalBackupFile = File(downloadDir, "${partition.name}_${timestamp}.img.gz")
            
            onProgress(10)
            
            // Â§á‰ªΩÂàÜÂå∫Êï∞ÊçÆÂà∞‰∏¥Êó∂Êñá‰ª∂
            val backupSuccess = if (partition.isImageFile) {
                // Â¶ÇÊûúÊòØÊò†ÂÉèÊñá‰ª∂ÔºåÁõ¥Êé•Â§çÂà∂ÔºàËøôÁßçÊÉÖÂÜµÂú®Êñ∞ÈÄªËæë‰∏≠‰∏çÂ∫îËØ•Âá∫Áé∞Ôºâ
                val sourceFile = File(partition.path)
                if (sourceFile.exists()) {
                    sourceFile.copyTo(tempBackupFile, overwrite = true)
                    tempBackupFile.exists() && tempBackupFile.length() == sourceFile.length()
                } else {
                    false
                }
            } else {
                // Â§á‰ªΩÁúüÂÆûÂàÜÂå∫
                backupRealPartition(partition, tempBackupFile, onProgress)
            }
            
            if (!backupSuccess || !tempBackupFile.exists()) {
                tempBackupFile.delete()
                return@withContext false
            }
            
            onProgress(70)
            
            // ÂéãÁº©Â§á‰ªΩÊñá‰ª∂
            val compressionSuccess = compressFile(tempBackupFile, finalBackupFile, onProgress)
            
            // Âà†Èô§‰∏¥Êó∂Êñá‰ª∂
            tempBackupFile.delete()
            
            if (compressionSuccess && finalBackupFile.exists()) {
                onProgress(95)
                
                // ÂàõÂª∫Â§á‰ªΩ‰ø°ÊÅØÊñá‰ª∂
                val infoFile = File(downloadDir, "${partition.name}_${timestamp}.info")
                infoFile.writeText("""
                    Â∞èYÂ≠óÂ∫ìÂ§á‰ªΩ‰ø°ÊÅØ
                    ====================
                    ‰ΩúËÄÖÔºöÂ∞èY
                    üêßÔºö3302719731
                    
                    ÂàÜÂå∫ÂêçÁß∞: ${partition.name}
                    ÂàÜÂå∫Ë∑ØÂæÑ: ${partition.path}
                    ÂàÜÂå∫Â§ßÂ∞è: ${partition.getFormattedSize()}
                    Â§á‰ªΩÊó∂Èó¥: ${dateFormat.format(Date())}
                    ËÆæÂ§áÂûãÂè∑: ${android.os.Build.MODEL}
                    AndroidÁâàÊú¨: ${android.os.Build.VERSION.RELEASE}
                    ÂéãÁº©Ê†ºÂºè: GZIP
                    ÂéãÁº©Êñá‰ª∂: ${finalBackupFile.name}
                """.trimIndent())
                
                // ËÆ°ÁÆóÂéãÁº©Áéá
                val originalSize = partition.size
                val compressedSize = finalBackupFile.length()
                val compressionRatio = if (originalSize > 0) {
                    ((originalSize - compressedSize) * 100 / originalSize).toInt()
                } else {
                    0
                }
                
                infoFile.appendText("\nÂéãÁº©Áéá: ${compressionRatio}%")
                
                onProgress(100)
                true
            } else {
                false
            }
        } catch (e: Exception) {
            e.printStackTrace()
            false
        }
    }
    
    // Â§á‰ªΩÁúüÂÆûÂàÜÂå∫ (ÂÖ¨ÂºÄÁâàÊú¨‰æõÊâπÈáèÂ§á‰ªΩ‰ΩøÁî®)
    suspend fun backupRealPartition(
        partition: Partition,
        backupFile: File,
        onProgress: (Int) -> Unit = {}
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            // È¶ñÂÖàÂ∞ùËØï‰ΩøÁî®ddÂëΩ‰ª§
            val command = "dd if=${partition.path} of=${backupFile.absolutePath} bs=4096"
            val result = RootManager.executeCommand(command)
            
            if (result != null && result.isSuccess) {
                onProgress(60)
                return@withContext backupFile.exists() && backupFile.length() > 0
            }
            
            // Â¶ÇÊûúddÂëΩ‰ª§Â§±Ë¥•Ôºå‰ΩøÁî®Êõø‰ª£ÊñπÊ≥ï
            return@withContext backupWithAlternativeMethod(partition, backupFile, onProgress)
        } catch (e: Exception) {
            e.printStackTrace()
            false
        }
    }
    
    // ÂéãÁº©Êñá‰ª∂
    private suspend fun compressFile(
        inputFile: File,
        outputFile: File,
        onProgress: (Int) -> Unit
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            val bufferSize = 1024 * 1024 // 1MB buffer
            val buffer = ByteArray(bufferSize)
            val totalSize = inputFile.length()
            var totalRead = 0L
            
            FileInputStream(inputFile).use { input ->
                GZIPOutputStream(FileOutputStream(outputFile)).use { gzipOutput ->
                    var read: Int
                    while (input.read(buffer).also { read = it } != -1) {
                        gzipOutput.write(buffer, 0, read)
                        totalRead += read
                        
                        // Êõ¥Êñ∞ËøõÂ∫¶Ôºà70-90%Ôºâ
                        val progress = if (totalSize > 0) {
                            (70 + (totalRead * 20 / totalSize)).toInt()
                        } else {
                            80
                        }
                        onProgress(progress.coerceIn(70, 90))
                    }
                }
            }
            
            outputFile.exists() && outputFile.length() > 0
        } catch (e: Exception) {
            e.printStackTrace()
            false
        }
    }
    
    private suspend fun backupWithAlternativeMethod(
        partition: Partition,
        backupFile: File,
        onProgress: (Int) -> Unit
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            // ‰ΩøÁî®SuFileËØªÂèñÂàÜÂå∫
            val suFile = SuFile(partition.path)
            if (!suFile.exists() || !suFile.canRead()) {
                return@withContext false
            }
            
            onProgress(20)
            
            // Â§çÂà∂ÂàÜÂå∫ÂÜÖÂÆπ
            val bufferSize = 1024 * 1024 // 1MB buffer
            val buffer = ByteArray(bufferSize)
            var totalRead = 0L
            val totalSize = partition.size
            
            SuFileInputStream.open(suFile).use { input ->
                FileOutputStream(backupFile).use { output ->
                    var read: Int
                    while (input.read(buffer).also { read = it } != -1) {
                        output.write(buffer, 0, read)
                        totalRead += read
                        
                        // Êõ¥Êñ∞ËøõÂ∫¶Ôºà20-60%Ôºâ
                        val progress = if (totalSize > 0) {
                            (20 + (totalRead * 40 / totalSize)).toInt()
                        } else {
                            40
                        }
                        onProgress(progress.coerceIn(20, 60))
                    }
                }
            }
            
            onProgress(60)
            true
        } catch (e: Exception) {
            e.printStackTrace()
            false
        }
    }
    
    fun getBackupDirectory(): File {
        val backupDir = File("/storage/emulated/0/Download")
        if (!backupDir.exists()) {
            backupDir.mkdirs()
        }
        return backupDir
    }
    
    fun getBackupList(): List<File> {
        val backupDir = getBackupDirectory()
        return backupDir.listFiles { file ->
            file.isFile && (file.name.endsWith(".img.gz") || file.name.endsWith(".info"))
        }?.sortedByDescending { it.lastModified() } ?: emptyList()
    }
    
    fun deleteBackup(backupFile: File): Boolean {
        return try {
            if (backupFile.exists()) {
                if (backupFile.isDirectory) {
                    backupFile.deleteRecursively()
                } else {
                    backupFile.delete()
                }
            } else {
                false
            }
        } catch (e: Exception) {
            false
        }
    }
    
    // ÊâπÈáèÂ§á‰ªΩÂà∞Âêå‰∏Ä‰∏™.zipÊñá‰ª∂
    suspend fun batchBackupToZip(
        partitions: List<Partition>,
        onProgress: (Int, String, String) -> Unit
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            val downloadDir = File("/storage/emulated/0/Download")
            if (!downloadDir.exists()) {
                downloadDir.mkdirs()
            }
            
            val timestamp = dateFormat.format(Date())
            val zipFile = File(downloadDir, "Â∞èYÂ≠óÂ∫ìÂ§á‰ªΩ_${timestamp}.zip")
            val tempDir = File(downloadDir, "temp_backup_${timestamp}")
            
            if (!tempDir.exists()) {
                tempDir.mkdirs()
            }
            
            try {
                onProgress(5, "ÂàõÂª∫ÊâπÈáèÂ§á‰ªΩÊñá‰ª∂...", "ÂàùÂßãÂåñ")
                
                ZipOutputStream(FileOutputStream(zipFile)).use { zipOut ->
                    partitions.forEachIndexed { index, partition ->
                        val baseProgress = (index * 80) / partitions.size
                        onProgress(5 + baseProgress, "Ê≠£Âú®Â§á‰ªΩ ${partition.name} (${index + 1}/${partitions.size})", "${partition.name}.img")
                        
                        // Â§á‰ªΩÂçï‰∏™ÂàÜÂå∫Âà∞‰∏¥Êó∂Êñá‰ª∂
                        val tempBackupFile = File(tempDir, "${partition.name}.img")
                        val backupSuccess = backupRealPartition(partition, tempBackupFile) { progress ->
                            val totalProgress = 5 + baseProgress + (progress * 80 / partitions.size / 100)
                            onProgress(totalProgress, "Ê≠£Âú®Â§á‰ªΩ ${partition.name} ($progress%)", "${partition.name}.img")
                        }
                        
                        if (backupSuccess && tempBackupFile.exists()) {
                            // Â∞ÜÂ§á‰ªΩÊñá‰ª∂Ê∑ªÂä†Âà∞ZIP
                            val zipEntry = ZipEntry("${partition.name}.img")
                            zipOut.putNextEntry(zipEntry)
                            
                            FileInputStream(tempBackupFile).use { input ->
                                val buffer = ByteArray(1024 * 1024) // 1MB buffer
                                var read: Int
                                while (input.read(buffer).also { read = it } != -1) {
                                    zipOut.write(buffer, 0, read)
                                }
                            }
                            
                            zipOut.closeEntry()
                            
                            // Âà†Èô§‰∏¥Êó∂Êñá‰ª∂
                            tempBackupFile.delete()
                        } else {
                            onProgress(5 + baseProgress, "Â§á‰ªΩ ${partition.name} Â§±Ë¥•", "${partition.name}.img")
                        }
                    }
                    
                    // Ê∑ªÂä†Â§á‰ªΩ‰ø°ÊÅØÊñá‰ª∂
                    onProgress(85, "Ê≠£Âú®ÁîüÊàêÂ§á‰ªΩ‰ø°ÊÅØ...", "backup_info.txt")
                    val infoEntry = ZipEntry("backup_info.txt")
                    zipOut.putNextEntry(infoEntry)
                    
                    val backupInfo = buildString {
                        appendLine("üåü XY Root Manager Â§á‰ªΩ‰ø°ÊÅØ üåü")
                        appendLine("=========================================")
                        appendLine()
                        appendLine("üì± ËÆæÂ§á‰ø°ÊÅØ:")
                        appendLine("   ËÆæÂ§áÂûãÂè∑: ${android.os.Build.MODEL}")
                        appendLine("   ÂìÅÁâå: ${android.os.Build.BRAND}")
                        appendLine("   AndroidÁâàÊú¨: ${android.os.Build.VERSION.RELEASE}")
                        appendLine("   APIÁ∫ßÂà´: ${android.os.Build.VERSION.SDK_INT}")
                        appendLine("   ‰∏ªÊùø: ${android.os.Build.BOARD}")
                        appendLine("   Â§ÑÁêÜÂô®: ${android.os.Build.HARDWARE}")
                        appendLine()
                        appendLine("üì¶ Â§á‰ªΩ‰ø°ÊÅØ:")
                        appendLine("   Â§á‰ªΩÊó∂Èó¥: ${SimpleDateFormat("yyyyÂπ¥MMÊúàddÊó• HH:mm:ss", Locale.CHINA).format(Date())}")
                        appendLine("   ÂàÜÂå∫Êï∞Èáè: ${partitions.size}")
                        appendLine("   Â§á‰ªΩÁ±ªÂûã: ÂÆåÊï¥ÂàÜÂå∫ÈïúÂÉè")
                        appendLine("   ÂéãÁº©Ê†ºÂºè: ZIP")
                        appendLine()
                        appendLine("üìã ÂàÜÂå∫ËØ¶ÊÉÖ:")
                        partitions.forEachIndexed { index, partition ->
                            appendLine("   ${index + 1}. ${partition.name}")
                            appendLine("      Ë∑ØÂæÑ: ${partition.path}")
                            appendLine("      Â§ßÂ∞è: ${FormatUtils.formatFileSize(partition.size)}")
                            appendLine()
                        }
                        appendLine("‚ö†Ô∏è ÈáçË¶ÅÊèêÁ§∫:")
                        appendLine("   1. ËØ∑Â¶•ÂñÑ‰øùÁÆ°Ê≠§Â§á‰ªΩÊñá‰ª∂")
                        appendLine("   2. Âà∑ÂÖ•ÂàÜÂå∫ÂâçËØ∑Á°Æ‰øùËÆæÂ§áÂûãÂè∑ÂåπÈÖç")
                        appendLine("   3. Âª∫ËÆÆÂú®‰∏ì‰∏ö‰∫∫ÂëòÊåáÂØº‰∏ãËøõË°åÊÅ¢Â§çÊìç‰Ωú")
                        appendLine("   4. Âà∑ÂÖ•ÈîôËØØÁöÑÂàÜÂå∫ÂèØËÉΩÂØºËá¥ËÆæÂ§áÊó†Ê≥ïÂêØÂä®")
                        appendLine()
                        appendLine("=========================================")
                        appendLine("üë®‚Äçüíª ‰ΩúËÄÖÔºöÂ∞èY")
                        appendLine("üêß QQÔºö3302719731")
                        appendLine("üí¨ Êúâ‰ªª‰ΩïÈóÆÈ¢òÂíåÂª∫ËÆÆÈÉΩËÉΩÈÄöËøáQQÂêëÊàëÊèêÂì¶")
                        appendLine("=========================================")
                    }
                    
                    zipOut.write(backupInfo.toByteArray())
                    zipOut.closeEntry()
                }
                
                onProgress(95, "Ê≠£Âú®ÂÆåÊàêÂ§á‰ªΩ...", "Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂")
                
                // Ê∏ÖÁêÜ‰∏¥Êó∂ÁõÆÂΩï
                if (tempDir.exists()) {
                    tempDir.deleteRecursively()
                }
                
                onProgress(100, "ÊâπÈáèÂ§á‰ªΩÂÆåÊàê", "ÊâÄÊúâÊñá‰ª∂")
                zipFile.exists() && zipFile.length() > 0
                
            } catch (e: Exception) {
                // Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
                if (tempDir.exists()) {
                    tempDir.deleteRecursively()
                }
                if (zipFile.exists()) {
                    zipFile.delete()
                }
                throw e
            }
        } catch (e: Exception) {
            e.printStackTrace()
            false
        }
    }
}
