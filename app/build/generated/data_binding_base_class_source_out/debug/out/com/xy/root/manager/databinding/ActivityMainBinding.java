// Generated by view binder compiler. Do not edit!
package com.xy.root.manager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.xy.root.manager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final LinearProgressIndicator backupProgressBar;

  @NonNull
  public final MaterialCardView backupProgressCard;

  @NonNull
  public final TextView backupProgressPercent;

  @NonNull
  public final TextView backupProgressText;

  @NonNull
  public final MaterialButton btnBatchBackup;

  @NonNull
  public final MaterialButton btnRefreshPartitions;

  @NonNull
  public final MaterialButton btnRequestRoot;

  @NonNull
  public final MaterialButton btnSelectAll;

  @NonNull
  public final TextView currentBackupFile;

  @NonNull
  public final LinearLayout emptyStateLayout;

  @NonNull
  public final ImageView imageViewRootStatus;

  @NonNull
  public final LinearProgressIndicator progressIndicator;

  @NonNull
  public final RecyclerView recyclerViewPartitions;

  @NonNull
  public final MaterialCardView referenceStatusCard;

  @NonNull
  public final MaterialCardView rootStatusCard;

  @NonNull
  public final SwipeRefreshLayout swipeRefresh;

  @NonNull
  public final TextView textViewPartitionCount;

  @NonNull
  public final TextView textViewProgress;

  @NonNull
  public final TextView textViewReferenceFolder;

  @NonNull
  public final TextView textViewReferenceStatus;

  @NonNull
  public final TextView textViewRootStatus;

  @NonNull
  public final TextView textViewRootType;

  @NonNull
  public final Toolbar toolbar;

  private ActivityMainBinding(@NonNull CoordinatorLayout rootView,
      @NonNull LinearProgressIndicator backupProgressBar,
      @NonNull MaterialCardView backupProgressCard, @NonNull TextView backupProgressPercent,
      @NonNull TextView backupProgressText, @NonNull MaterialButton btnBatchBackup,
      @NonNull MaterialButton btnRefreshPartitions, @NonNull MaterialButton btnRequestRoot,
      @NonNull MaterialButton btnSelectAll, @NonNull TextView currentBackupFile,
      @NonNull LinearLayout emptyStateLayout, @NonNull ImageView imageViewRootStatus,
      @NonNull LinearProgressIndicator progressIndicator,
      @NonNull RecyclerView recyclerViewPartitions, @NonNull MaterialCardView referenceStatusCard,
      @NonNull MaterialCardView rootStatusCard, @NonNull SwipeRefreshLayout swipeRefresh,
      @NonNull TextView textViewPartitionCount, @NonNull TextView textViewProgress,
      @NonNull TextView textViewReferenceFolder, @NonNull TextView textViewReferenceStatus,
      @NonNull TextView textViewRootStatus, @NonNull TextView textViewRootType,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.backupProgressBar = backupProgressBar;
    this.backupProgressCard = backupProgressCard;
    this.backupProgressPercent = backupProgressPercent;
    this.backupProgressText = backupProgressText;
    this.btnBatchBackup = btnBatchBackup;
    this.btnRefreshPartitions = btnRefreshPartitions;
    this.btnRequestRoot = btnRequestRoot;
    this.btnSelectAll = btnSelectAll;
    this.currentBackupFile = currentBackupFile;
    this.emptyStateLayout = emptyStateLayout;
    this.imageViewRootStatus = imageViewRootStatus;
    this.progressIndicator = progressIndicator;
    this.recyclerViewPartitions = recyclerViewPartitions;
    this.referenceStatusCard = referenceStatusCard;
    this.rootStatusCard = rootStatusCard;
    this.swipeRefresh = swipeRefresh;
    this.textViewPartitionCount = textViewPartitionCount;
    this.textViewProgress = textViewProgress;
    this.textViewReferenceFolder = textViewReferenceFolder;
    this.textViewReferenceStatus = textViewReferenceStatus;
    this.textViewRootStatus = textViewRootStatus;
    this.textViewRootType = textViewRootType;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backupProgressBar;
      LinearProgressIndicator backupProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (backupProgressBar == null) {
        break missingId;
      }

      id = R.id.backupProgressCard;
      MaterialCardView backupProgressCard = ViewBindings.findChildViewById(rootView, id);
      if (backupProgressCard == null) {
        break missingId;
      }

      id = R.id.backupProgressPercent;
      TextView backupProgressPercent = ViewBindings.findChildViewById(rootView, id);
      if (backupProgressPercent == null) {
        break missingId;
      }

      id = R.id.backupProgressText;
      TextView backupProgressText = ViewBindings.findChildViewById(rootView, id);
      if (backupProgressText == null) {
        break missingId;
      }

      id = R.id.btnBatchBackup;
      MaterialButton btnBatchBackup = ViewBindings.findChildViewById(rootView, id);
      if (btnBatchBackup == null) {
        break missingId;
      }

      id = R.id.btnRefreshPartitions;
      MaterialButton btnRefreshPartitions = ViewBindings.findChildViewById(rootView, id);
      if (btnRefreshPartitions == null) {
        break missingId;
      }

      id = R.id.btnRequestRoot;
      MaterialButton btnRequestRoot = ViewBindings.findChildViewById(rootView, id);
      if (btnRequestRoot == null) {
        break missingId;
      }

      id = R.id.btnSelectAll;
      MaterialButton btnSelectAll = ViewBindings.findChildViewById(rootView, id);
      if (btnSelectAll == null) {
        break missingId;
      }

      id = R.id.currentBackupFile;
      TextView currentBackupFile = ViewBindings.findChildViewById(rootView, id);
      if (currentBackupFile == null) {
        break missingId;
      }

      id = R.id.emptyStateLayout;
      LinearLayout emptyStateLayout = ViewBindings.findChildViewById(rootView, id);
      if (emptyStateLayout == null) {
        break missingId;
      }

      id = R.id.imageViewRootStatus;
      ImageView imageViewRootStatus = ViewBindings.findChildViewById(rootView, id);
      if (imageViewRootStatus == null) {
        break missingId;
      }

      id = R.id.progressIndicator;
      LinearProgressIndicator progressIndicator = ViewBindings.findChildViewById(rootView, id);
      if (progressIndicator == null) {
        break missingId;
      }

      id = R.id.recyclerViewPartitions;
      RecyclerView recyclerViewPartitions = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewPartitions == null) {
        break missingId;
      }

      id = R.id.referenceStatusCard;
      MaterialCardView referenceStatusCard = ViewBindings.findChildViewById(rootView, id);
      if (referenceStatusCard == null) {
        break missingId;
      }

      id = R.id.rootStatusCard;
      MaterialCardView rootStatusCard = ViewBindings.findChildViewById(rootView, id);
      if (rootStatusCard == null) {
        break missingId;
      }

      id = R.id.swipeRefresh;
      SwipeRefreshLayout swipeRefresh = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefresh == null) {
        break missingId;
      }

      id = R.id.textViewPartitionCount;
      TextView textViewPartitionCount = ViewBindings.findChildViewById(rootView, id);
      if (textViewPartitionCount == null) {
        break missingId;
      }

      id = R.id.textViewProgress;
      TextView textViewProgress = ViewBindings.findChildViewById(rootView, id);
      if (textViewProgress == null) {
        break missingId;
      }

      id = R.id.textViewReferenceFolder;
      TextView textViewReferenceFolder = ViewBindings.findChildViewById(rootView, id);
      if (textViewReferenceFolder == null) {
        break missingId;
      }

      id = R.id.textViewReferenceStatus;
      TextView textViewReferenceStatus = ViewBindings.findChildViewById(rootView, id);
      if (textViewReferenceStatus == null) {
        break missingId;
      }

      id = R.id.textViewRootStatus;
      TextView textViewRootStatus = ViewBindings.findChildViewById(rootView, id);
      if (textViewRootStatus == null) {
        break missingId;
      }

      id = R.id.textViewRootType;
      TextView textViewRootType = ViewBindings.findChildViewById(rootView, id);
      if (textViewRootType == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityMainBinding((CoordinatorLayout) rootView, backupProgressBar,
          backupProgressCard, backupProgressPercent, backupProgressText, btnBatchBackup,
          btnRefreshPartitions, btnRequestRoot, btnSelectAll, currentBackupFile, emptyStateLayout,
          imageViewRootStatus, progressIndicator, recyclerViewPartitions, referenceStatusCard,
          rootStatusCard, swipeRefresh, textViewPartitionCount, textViewProgress,
          textViewReferenceFolder, textViewReferenceStatus, textViewRootStatus, textViewRootType,
          toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
